# Generated by Mistral 7B via Ollama

class Solution:
    def maxProfit(self, k, prices):
        if k >= len(prices) // 2:
            return self._greedy(prices)
        else:
            return self._dp(k, prices)

    def _greedy(self, prices):
        profit = 0
        transactions = 0
        for i in range(1, len(prices)):
            if prices[i] > prices[i - 1]:
                if not transactions % 2:
                    profit += prices[i] - prices[i - 1]
                transactions += 1
        return profit

    def _dp(self, k, prices):
        buy = [0] * (k + 1)
        sell = [0] * (k + 1)

        for i in range(1, len(prices)):
            for j in range(1, min(k+1, i)+1):
                buy[j] = max(buy[j], -prices[i-1] + sell[j])
                sell[j] = max(sell[j], buy[j - 1] + prices[i])
        return sell[k]

