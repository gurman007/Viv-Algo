# Re-generated by Mistral 7B via Ollama
from typing import List
from collections import defaultdict

class Solution:
    def maximumScoreAfterOperations(self, edges: List[List[int]], values: List[int]) -> int:
        graph = defaultdict(list)
        parent = [-1] * len(values)
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)

        max_sum = 0
        min_sum = 0
        def dfs(node, summ):
            if node == -1:
                return 0
            nonlocal max_sum, min_sum
            max_sum = max(max_sum, summ + values[node])
            min_sum = min(min_sum, summ - values[node])
            child_sum = 0
            for neighbor in graph[node]:
                if parent[neighbor] == node:
                    continue
                parent[neighbor] = node
                child_sum += dfs(neighbor, summ - values[node])
            return child_sum + max_sum - min_sum

        dfs(0, sum(values))
        return max_sum

