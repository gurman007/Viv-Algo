# Generated by Mistral 7B via Ollama
from functools import lru_cache

class Solution:
    def mctFromLeafValues(self, arr):
        @lru_cache(None) # Memoization to optimize recursive computation
        def dfs(index, largest):
            if index == len(arr) or arr[index] > largest:
                return 0
            total = (largest - arr[index]) * (dfs(2 * index + 1, max(arr[index], largest)) + dfs(2 * index + 2, max(arr[index], largest)))
            return total if index == len(arr) - 1 else min(total, dfs(index+1, arr[index]))
        return dfs(0, float('inf'))

