# Generated by Mistral 7B via Ollama

class Solution:
    def soupServings(self, n):
        dp = [[0]*(n*2+1) for _ in range(n*2+1)]
        for i in range(2, 8):
            for j in range(i):
                for k in range(min(j, (i-j)*3//2), max(0, (i+j)*3//2)):
                    dp[i][j] += dp[i-k][j-k] if i - k >= 0 and j - k >= 0 else 0
        p = [1/4, 1/4, 1/4, 1/4]
        ans = 0
        for op in p:
            for _ in range(n*2):
                for i in range(2, 8):
                    if dp[i][n+i] > 0:
                        dp[i][n+i] -= 1
                        break
                    elif dp[i-1][n+i-1] > 0:
                        dp[i][n+i] += dp[i-1][n+i-1]
                        dp[i-1][n+i-1] -= 1
                if all([dp[i][j] == 0 for i in range(2, 8)]):
                    ans += op
        return ans * 2 + sum(dp[7][2*n:])/pow(4, n)

